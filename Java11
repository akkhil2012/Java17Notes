Java 11 Features:

// Write Sting using Files I/O

        String str = "JD\nJD\nJD";

        System.out.println(">>>>> " + str.lines().collect(Collectors.toList()));

        Path path = Files.writeString(Files.createTempFile("test",".txt"),"Sample data..");
        System.out.println(" writing: " + path);

        String s = Files.readString(path);
        System.out.println("  " + s);

===================
Thread example
=================
package multiThreading;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.*;

public class ThreadBasics {

    // start thread
    // DeadLock
    // Syncronization
    // wait notify thread
    // Lock
    // ThreadLocal
    public static void main(String args[]) throws Exception {

        ExecutorService executorService = Executors.newFixedThreadPool(3);
        CompletableFuture<Integer>
                 future1 = CompletableFuture.supplyAsync(() ->{
            try {
                TimeUnit.SECONDS.sleep(5);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return 1;
        },executorService);

        CompletableFuture<Integer> future2 = CompletableFuture.supplyAsync(() -> {
            try {
                TimeUnit.SECONDS.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return 20;
        }, executorService);

        CompletableFuture<Void> allOf =
                CompletableFuture.allOf(future1,future2);

        allOf.thenRun(() -> {
            try {
                Integer result1 = future1.get();
                Integer result2 = future2.get();
                System.out.println("Results: " + result1 + ", " + result2);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });

        executorService.shutdown();















        Runnable r = new Runnable() {
            @Override
            public void run() {
                System.out.println("Thread 1 is ------------> " + Thread.currentThread().getName());
            }
        };

        /* for(int i=0;i<10;i++){
             Thread t1 = new Thread(r);
             t1.setName("Thread_ "+i);
             t1.start();
             //t1.join();
         }*/

        /* ExecutorService service = Executors.newFixedThreadPool(4);
         for(int i=0;i<20;i++){
             service.execute(r);
         }*/

       //


        /*
          CompletableFutire exampl
         */








        ExecutorService service = Executors.newScheduledThreadPool(2);

        //CompletableFutureSample completableFutureSample = new CompletableFutureSample();

        //Future<String> f =  service.submit(completableFutureSample);
        List<Callable<String>> tasks = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            tasks.add(new CompletableFutureSample());
        }
        tasks.add(new BlockerCallable());

        List<Future<String>> res =
                service.invokeAll(tasks);


        System.out.println("------------WAITING----------");
        res.stream()
                .forEach(rr -> System.out.println(" ==> " + rr));


        // System.out.println("Result of callable is  ... " + f.get());
        service.shutdownNow();
        //




    }


}


class CompletableFutureSample implements Callable {

    @Override
    public String call() throws Exception {
        //Thread.sleep(5000);
        return Thread.currentThread().getName();
    }
}

class BlockerCallable implements Callable {

    @Override
    public Object call() throws Exception {
        Thread.sleep(6000);
        return Thread.currentThread().getName();
    }
}


class ThreadTask implements Runnable {
    @Override
    public void run() {
        System.out.println("Thread running is ------------> " + Thread.currentThread().getName());
    }
}
